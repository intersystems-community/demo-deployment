name: Cloud Run Deploy

on:
  workflow_call:
    inputs:
      name:
        description: 'Domain name of deployment, before `.demo.community.intersystems.com`'
        required: true
        type: string
      domain_base:
        description: 'Base domain for deployment'
        required: false
        type: string
        default: 'demo.community.intersystems.com'
      namespace:
        description: 'Namespace to deploy to'
        required: false
        type: string
        default: demo
      memory:
        description: 'Memory for the instance'
        type: string
        default: 1Gi
      port:
        description: 'WebPort for the running instance'
        type: number
        default: 52773
      persistence:
        description: 'Set to true to persist your data.'
        required: false
        type: boolean
        default: false
    secrets:
      SERVICE_ACCOUNT_KEY:
        required: true
      CUSTOM_VARS_LIST:
        required: false
  workflow_dispatch:
    inputs:
      repository:
        description: 'Deploying repository'
        required: true
        type: string
      ref:
        description: 'Branch Name in deploying repository'
        required: true
        type: choice
        default: main
        options:
          - master
          - main
      name:
        description: 'Domain name of deployment, before `.demo.community.intersystems.com`'
        required: true
        type: string
      domain_base:
        description: 'Base domain for deployment'
        required: false
        type: string
        default: 'demo.community.intersystems.com'

env:
  # Change this section according to your needs
  IMAGE_NAME:   ${{ inputs.name }}
  SERVICE:      ${{ inputs.name }}
  DOMAIN_NAME:  ${{ inputs.name }}.${{ inputs.domain_base }}

# Leave this section untouched
  PROJECT_ID:     iris-community-demos
  CLUSTER_NAME:   demo
  GITHUB_SHA:     ${{ github.sha }}
  GITHUB_REPO:    ${{ github.repository }}
  REGION:         europe-west2
  NAMESPACE:      ${{ inputs.namespace }}
  SERVICE_PORT:   ${{ inputs.port }}
  SERVICE_MEMORY: ${{ inputs.memory }}

jobs:
  deploy-cloud-run:
    # if: github.event.repository.fork == false && github.event.repository.is_template == false
    name: Deploy to Cloud Run
    runs-on: ubuntu-22.04
    if: ${{ ! inputs.persistence }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - name: Google Authentication
      uses: google-github-actions/auth@v2.1.11
      with:
        credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v2.3.4
      with:
        project_id:   ${{ env.PROJECT_ID }}
        cluster_name: ${{ env.CLUSTER_NAME }}
        location:     ${{ env.REGION }}

    - name: Setup gcloud cli
      uses: google-github-actions/setup-gcloud@v2.1.5
      with:
        version: '512.0.0'

    - name: Authorize Docker push
      run: |
        gcloud --quiet auth configure-docker ${REGION}-docker.pkg.dev

    - name: Build and Push image
      run: |
        docker buildx build -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/community/${IMAGE_NAME}:${GITHUB_SHA} --push .

    # Setting verbosity to debug leads to printing custom variables in the pipeline logs.
    # It might be possible to replace 'set-env-vars' to 'set-secrets' but it requires additional Service Account permissions.
    - name: Deploy to Cloud Run
      run: |
        echo "[INFO] Set google project..."
        gcloud config set project ${PROJECT_ID}

        echo "[INFO] Escaping custom variables..."
        export CUSTOM_VARS_LIST_ESCAPED=$(echo "${{ secrets.CUSTOM_VARS_LIST }}" | sed -E 's/"/\\"/g')

        echo "[INFO] Deploy service..."
        gcloud run deploy ${SERVICE}                \
          --platform gke                            \
          --cluster ${CLUSTER_NAME}                 \
          --cluster-location ${REGION}              \
          --namespace ${NAMESPACE}                  \
          --port ${SERVICE_PORT:-52773}             \
          --min-instances 1                         \
          --memory ${SERVICE_MEMORY:-512Mi}         \
          --timeout 300                             \
          --verbosity info                          \
          --set-env-vars GITHUB_REPO=${GITHUB_REPO}${CUSTOM_VARS_LIST_ESCAPED:+,${CUSTOM_VARS_LIST_ESCAPED}} \
          --image ${REGION}-docker.pkg.dev/${PROJECT_ID}/community/${IMAGE_NAME}:${GITHUB_SHA}

        echo "[INFO] Create domain mappings..."
        if [[ $(gcloud run domain-mappings list --platform gke --cluster ${CLUSTER_NAME} --cluster-location ${REGION} --namespace ${NAMESPACE} --filter "DOMAIN=${DOMAIN_NAME}" | grep -v DOMAIN | wc -l) == 0 ]]; then
          gcloud run domain-mappings create \
            --service ${SERVICE}            \
            --platform gke                  \
            --cluster ${CLUSTER_NAME}       \
            --cluster-location ${REGION}    \
            --namespace ${NAMESPACE}        \
            --verbosity debug               \
            --domain ${DOMAIN_NAME}
        fi

    - name: Create domain name
      run: |
        kubectl version
        echo "[INFO] Checking if [${DOMAIN_NAME}] is in the existing Ingress annotation..."
        CURRENT_DOMAINS_LIST=$(kubectl -n gke-system get svc istio-ingress -o jsonpath="{.metadata.annotations['external-dns\.alpha\.kubernetes\.io/hostname']}")
        if [[ $(echo ${CURRENT_DOMAINS_LIST} | grep -w "${DOMAIN_NAME}" | wc -c) -eq 0 ]]; then \
          echo "[INFO] Domain [${DOMAIN_NAME}] is ABSENT in the domains list. Adding...";       \
          kubectl -n gke-system annotate --overwrite svc istio-ingress external-dns\.alpha\.kubernetes\.io/hostname=${CURRENT_DOMAINS_LIST},${DOMAIN_NAME}; \
          echo -n "[INFO] Resulting domain names: "
          kubectl -n gke-system get svc istio-ingress -o jsonpath="{.metadata.annotations['external-dns\.alpha\.kubernetes\.io/hostname']}"
        else
          echo "[INFO] Domain [${DOMAIN_NAME}] is in the domains list. Leave untouched...";     \
        fi

    - name: Enable TLS-access
      run: |
        kubectl version
        kubectl patch configmap config-domainmapping -n knative-serving -p '{"data":{"autoTLS":"Enabled"}}'

  deploy-stateful-workload:
    name: Deploy Stateful Workload
    runs-on: ubuntu-22.04
    if: ${{ inputs.persistence }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - name: Google Authentication
      uses: google-github-actions/auth@v2.1.11
      with:
        credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v2.3.4
      with:
        project_id:   ${{ env.PROJECT_ID }}
        cluster_name: ${{ env.CLUSTER_NAME }}
        location:     ${{ env.REGION }}

    - name: Setup gcloud cli
      uses: google-github-actions/setup-gcloud@v2.1.5
      with:
        version: '512.0.0'

    - name: Authorize Docker push
      run: |
        gcloud --quiet auth configure-docker ${REGION}-docker.pkg.dev

    - name: Build and Push image
      run: |
        docker buildx build -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/community/${IMAGE_NAME}:${GITHUB_SHA} --push .

    - name: Prepare Helm Environment Variables
      id: prepare_helm_vars
      run: |
        echo "[INFO] Escaping custom variables..."
        export CUSTOM_VARS_LIST_ESCAPED=$(echo "${{ secrets.CUSTOM_VARS_LIST }}" | sed -E 's/"/\\"/g')

        HELM_ARGS_STRING=""
        if [[ -n "$CUSTOM_VARS_LIST_ESCAPED" ]]; then
          echo "[INFO] CUSTOM_VARS_LIST_ESCAPED contains data. Parsing key-values..."
          IFS=',' read -r -a ENV_PAIRS <<< "$CUSTOM_VARS_LIST_ESCAPED"

          INDEX=2
          for PAIR in "${ENV_PAIRS[@]}"; do
            # Skip empty pairs
            if [[ -z "$PAIR" ]]; then
              continue
            fi

            # Check if the pair contains '='
            if [[ "$PAIR" != *"="* ]]; then
              echo "[WARNING] Skipping malformed pair (no '='): '$PAIR'"
              continue
            fi

            # Split each pair into KEY and VALUE at the first '='
            KEY="${PAIR%%=*}"
            VALUE="${PAIR#*=}"
            echo "[INFO] Processing pair: '$PAIR' -> KEY='$KEY', VALUE='$VALUE'"

            # Only add if KEY is not empty (VALUE can be empty string)
            if [[ -n "$KEY" ]]; then
              HELM_ARGS_STRING="$HELM_ARGS_STRING --set-string 'extraEnv[$INDEX].name=$KEY' --set-string 'extraEnv[$INDEX].value=$VALUE'"
              ((INDEX++))
            else
              echo "[WARNING] Skipping empty key: KEY='$KEY', VALUE='$VALUE'"
            fi
          done
        fi

        # Output the helm args string
        echo "helm_args=$HELM_ARGS_STRING" >> $GITHUB_OUTPUT
        echo "[DEBUG] Generated helm_args: $HELM_ARGS_STRING"

    - name: Deploy Stateful Workload
      run: |
        echo "[INFO] Set google project..."
        gcloud config set project ${PROJECT_ID}

        echo "[INFO] Escaping custom variables..."
        export CUSTOM_VARS_LIST_ESCAPED=$(echo "${{ secrets.CUSTOM_VARS_LIST }}" | sed -E 's/"/\\"/g')

        echo "[INFO] Installing IRIS Helm charts repository..."
        helm repo add intersystems-charts https://charts.demo.community.intersystems.com

        echo "[INFO] Deploy Helm release..."
        helm upgrade --install ${{ inputs.name }} intersystems-charts/iris-app \
            --namespace ${NAMESPACE} \
            --version 0.0.1 \
            --set image.repository=${REGION}-docker.pkg.dev/${PROJECT_ID}/community/${IMAGE_NAME} \
            --set image.tag=${GITHUB_SHA} \
            --set resources.limits.memory=${SERVICE_MEMORY:-1Gi} \
            --set service.webPort=${SERVICE_PORT:-52773} \
            --set ingress.name=${{ inputs.name }} \
            --set ingress.domain=${DOMAIN_NAME} \
            --set-string 'extraEnv[0].name=ISC_DATA_DIRECTORY' \
            --set-string 'extraEnv[0].value=/isc/data' \
            --set-string 'extraEnv[1].name=GITHUB_REPO' \
            --set-string 'extraEnv[1].value=${GITHUB_REPO}' \
            ${{ steps.prepare_helm_vars.outputs.helm_args }} \
            --wait \
            --atomic \
            --timeout 10m
